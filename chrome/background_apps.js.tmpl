/**
 *
 * @source: hybridge (chrome) background_apps.js.tmpl
 * @author: Matteo Nastasi <nastasi@alternativeoutout.it>
 * @link: https://github.com/nastasi/hybridge
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in this page.
 *
 * Copyright (C) 2018 Matteo Nastasi
 *
 *
 * The JavaScript code in this page is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

// depends on background_commons.js

console.log("background_apps.js: begin");


function app_one(config) {
    console.log('app_one initialization');
    console.log(config);
    this.window = new window_feat(config, "app_one.html", 5000);
    this.config = config;
    this.app_name = 'app_one';
}

app_one.prototype = {
    app_name: null,
    port: null,

    accept_persist_conn: function(port) {
        console.log('accept_persist');
        var _this = this;
        this.port = port;
        this.port.onMessage.addListener(function(msg) {
            _this.on_message(msg);
        });

        // TODO: on release or how it is called mgmt
    },

    on_message: function(msg) {
        console.log('message received by app_one:');
        console.log(msg);

        this.hybridge.send_to_local_app(this.app_name, msg);
    },

    window_open: function() {
        this.window.open();
    },

    send: function(a, b) {
        console.log('received a message from command: A [' + a + '] B [' + b + ']');
        if (this.port != null) {
            this.port.postMessage({'a':a, 'b':b});
        }
        else {
            console.log('port not available');
        }
    }
}

function app_two(config) {
    console.log('app_two initialization');
    console.log(config);
    this.window = new window_feat(config, "app_two.html", 5000);
    this.config = config;
}

app_two.prototype = {
    port: null,
    window_open: function() {
        this.window.open();
    }
}

function app_three(config) {
    console.log('app_three initialization');
    console.log(config);
    this.window = new window_feat(config, "app_three.html", 5000);
    this.config = config;
}

app_three.prototype = {
    port: null,
    window_open: function() {
        this.window.open();
    }
}

var config = {
    application_url: "localhost:8010/",
    server_url: "localhost:8000/",
    ws_address: "websocketserver",
    is_secure: false,
    apps: null
}

var app_one_config = {
    'hybridge': null,
    'general': config,
    'window': {'page': 'app_one.html',
               'tout': 5000 }
};

var app_two_config = {
    'hybridge': null,
    'general': config,
    'window': {'page': 'app_two.html',
               'tout': 5000 }
};

var app_three_config = {
    'hybridge': null,
    'general': config,
    'window': {'page': 'app_three.html',
               'tout': 5000 }
};

config.apps = {'app_one': new app_one(app_one_config),
               'app_two': new app_two(app_two_config),
               'app_three': new app_three(app_three_config)
              };


console.log("background_apps.js: end");
