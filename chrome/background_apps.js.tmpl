/**
 *
 * @source: hybridge (chrome) background_apps.js.tmpl
 * @author: Matteo Nastasi <nastasi@alternativeoutout.it>
 * @link: https://github.com/nastasi/hybridge
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in this page.
 *
 * Copyright (C) 2018 Matteo Nastasi
 *
 *
 * The JavaScript code in this page is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

// depends on background_commons.js

console.log("background_apps.js: begin");

function ipt(config) {
    console.log('ipt initialization');
    console.log(config);
    this.window = new window_feat(config, "ipt/", 5000);
    this.config = config;
    this.name = 'ipt';
}

ipt.prototype = {
    hybridge: null,
    name: null,
    port: null,
    port_open_cbs: {},
    port_close_cbs: {},
    // TODO: symbolic routing: key: *, 'to' as 'other'
    routes: {'ext': {'window_open': {'to': 'bridge'},
                     'set_cells': {'to': 'web'}},
             'web': {'ext_app_open': {'to': 'ext'},
                     'select_file': {'to': 'ext'},
                     'ls_ipt_dir': {'to': 'ext'},
                     'clear_ipt_dir': {'to': 'ext'},
                     'on_same_fs': {'to': 'ext'},
                     'rm_file_from_ipt_dir': {'to': 'ext'},
                     'rename_file_in_ipt_dir': {'to': 'ext'},
                     'run_oq_engine_calc': {'to': 'ext'},
                     'save_str_to_file': {'to': 'ext'},
                     'read_file_in_ipt_dir': {'to': 'ext'},
                     'select_and_copy_file_to_ipt_dir': {'to': 'ext'},
                     'mkdir_in_ipt_dir': {'to': 'ext'},
                     'rmdir_from_ipt_dir': {'to': 'ext'},
                     'delegate_download': {'to': 'ext'},
                    }
            },

    register: function(hybridge) {
        this.hybridge = hybridge;
    },

    window_open: function() {
        this.window.open();
        return {'success': true};
    }
}

function apptest(config) {
    console.log('apptest initialization');
    console.log(config);
    this.window = new window_feat(config, "apptest/", 5000);
    this.config = config;
    this.name = 'apptest';
}

apptest.prototype = {
    hybridge: null,
    name: null,
    port: null,
    port_open_cbs: {},
    port_close_cbs: {},
    // TODO: symbolic routing: key: *, 'to' as 'other'
    routes: {'ext': {'window_open': {'to': 'bridge'},
                     'set_cells': {'to': 'web'}},
             'web': {
                     'ext_app_open': {'to': 'ext'},
                     'notify_click': {'to': 'ext'},
                     'info': {'to': 'ext'},
                     'warning': {'to': 'ext'},
                     'error': {'to': 'ext'},
                    }
            },

    register: function(hybridge) {
        this.hybridge = hybridge;
    },

    window_open: function() {
        this.window.open();
        return {'success': true};
    }
}


function taxtweb(config) {
    console.log('taxtweb initialization');
    console.log(config);
    this.window = new window_feat(config, "taxtweb/", 5000);
    this.config = config;
    this.name = 'taxtweb';
}

taxtweb.prototype = {
    hybridge: null,
    name: null,
    port: null,
    port_open_cbs: {},
    port_close_cbs: {},
    // TODO: symbolic routing: key: *, 'to' as 'other'
    routes: {'ext': {'window_open': {'to': 'bridge'},
                     'set_cells': {'to': 'web'}},
             'web': {'ext_app_open': {'to': 'ext'}}},

    register: function(hybridge) {
        this.hybridge = hybridge;
    },

    window_open: function() {
        this.window.open();
        return {'success': true};
    }
}


function taxonomy(config) {
    console.log('taxonomy initialization');
    console.log(config);
    this.window = new window_feat(config, "taxonomy/", 5000);
    this.config = config;
    this.name = 'taxonomy';
}

taxonomy.prototype = {
    hybridge: null,
    name: null,
    port: null,
    port_open_cbs: {},
    port_close_cbs: {},
    // TODO: symbolic routing: key: *, 'to' as 'other'
    routes: {'ext': {'window_open': {'to': 'bridge'},
                     'set_cells': {'to': 'web'}},
             'web': {'ext_app_open': {'to': 'ext'}}},

    register: function(hybridge) {
        this.hybridge = hybridge;
    },

    window_open: function() {
        this.window.open();
        return {'success': true};
    }
}

function config_apps(opts) {
    var config = {
        'application_url': 'localhost:8040/',
        'server_url': opts.base_url,
        'ws_address': '',
        'is_secure': false,
        'apps': null
    }

    if (opts.is_devel == 'true') {
        var apptest_config = {
            'hybridge': null,
            'general': config,
            'window': {'page': 'apptest/',
                       'tout': 5000 }
        };
        var ipt_config = {
            'hybridge': null,
            'general': config,
            'window': {'page': 'ipt_test/',
                       'tout': 5000 }
        }
        var taxtweb_config = {
            'hybridge': null,
            'general': config,
            'window': {'page': 'taxtweb_test/',
                       'tout': 5000 }
        };
        var taxonomy_config = {
            'hybridge': null,
            'general': config,
            'window': {'page': 'taxonomy_test/',
                       'tout': 5000 }
        };
    } else {
        var ipt_config = {
            'hybridge': null,
            'general': config,
            'window': {'page': 'ipt/',
                       'tout': 5000 }
        };
        var taxtweb_config = {
            'hybridge': null,
            'general': config,
            'window': {'page': 'taxtweb/',
                       'tout': 5000 }
        };
        var taxonomy_config = {
            'hybridge': null,
            'general': config,
            'window': {'page': 'taxonomy/',
                       'tout': 5000 }
        };
    };


    config.apps = {'ipt': new ipt(ipt_config),
                   'taxtweb': new taxtweb(taxtweb_config),
                   'taxonomy': new taxonomy(taxonomy_config)
                  }
    if (opts.is_devel == 'true') {
        config.apps['apptest'] = new apptest(apptest_config);
    }
    return config;
}

console.log("background_apps.js: end");
